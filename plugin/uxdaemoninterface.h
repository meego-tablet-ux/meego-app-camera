/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp ../meego-ux-daemon/interfaces/lockcontrol.xml -p uxdaemoninterface
 *
 * qdbusxml2cpp is Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef UXDAEMONINTERFACE_H_1496766528
#define UXDAEMONINTERFACE_H_1496766528

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.lockstatus.query
 */
class ComLockstatusQueryInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.lockstatus.query"; }

public:
    ComLockstatusQueryInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ComLockstatusQueryInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> launchDesktopByName(const QString &name, const QString &cmd, const QString &cdata)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(name) << qVariantFromValue(cmd) << qVariantFromValue(cdata);
        return asyncCallWithArgumentList(QLatin1String("launchDesktopByName"), argumentList);
    }

    inline QDBusPendingReply<> lockscreen()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("lockscreen"), argumentList);
    }

    inline QDBusPendingReply<bool> lockscreen_status()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("lockscreen_status"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void screenOn(bool status);
};

namespace com {
  namespace lockstatus {
    typedef ::ComLockstatusQueryInterface query;
  }
}
#endif
